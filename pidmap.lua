---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by liaozhaoyan.
--- DateTime: 2023/10/1 11:37 AM
---

require("eclass")
require("bit")
local pystring = require("pystring")

local Cpidmap = class("pidmap")

local function add2Map(maps, cnt, cell, fileOnly)
    local start, stop = unpack(pystring:split(cell[1], '-', 2))
    local elf = cell[6]
    if not fileOnly or (fileOnly and string.sub(elf, 1, 1) == '/') then
        maps[cnt] = {
            tonumber(start, 16),
            tonumber(stop, 16),
            cell[2], elf}
        cnt = cnt + 1
    end
    return cnt
end

local function genMap(pid, filter, fileOnly)
    local cnt = 1
    local maps = {}
    local fName = string.format("/proc/%s/maps", tostring(pid))
    for line in io.lines(fName) do
        local cell = pystring:split(line) -- 0066d000-0066e000 rw-p 0006d000 fd:02 147972 /usr/bin/luajit-2.0.5
        if filter then
            if string.match(cell[2], filter) then
                cnt = add2Map(maps, cnt, cell, fileOnly)
            end
        else
            cnt = add2Map(maps, cnt, cell, fileOnly)
        end
    end
    return maps
end

function Cpidmap:_init_(pid, filter, fileOnly)
    self._maps = genMap(pid, filter, fileOnly)
end

function Cpidmap:elfInfo(elf)
    for _, cell in ipairs(self._maps) do
        if string.match(cell[4], elf) then
            return cell
        end
    end
end

function Cpidmap:elfInfos(elf)
    local cnt = 1
    local res = {}
    for _, cell in ipairs(self._maps) do
        if string.match(cell[4], elf) then
            res[cnt] = cell
            cnt = cnt + 1
        end
    end
    return res
end

function Cpidmap:query(addr)
    local maps = self._maps
    local left = 1
    local right = #maps
    local mid

    while left <= right do
        mid = bit.rshift(left + right, 1)

        if addr > maps[mid][2] then  -- position is larger than the end of elf.
            left = mid + 1
        elseif addr < maps[mid][1] then -- position is lower than the begin of elf
            right = mid - 1
        else
            if addr >= maps[mid][1] and addr <= maps[mid][2] then
                return maps[mid]
            end
        end
    end
end

return Cpidmap